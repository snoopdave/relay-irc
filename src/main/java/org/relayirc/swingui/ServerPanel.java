//-----------------------------------------------------------------------------
// $RCSfile: ServerPanel.java,v $
// $Revision: 1.1.2.1 $
// $Author: snoopdave $
// $Date: 2001/02/09 03:46:33 $
//-----------------------------------------------------------------------------

package org.relayirc.swingui;

import org.relayirc.chatengine.Server;
import org.relayirc.swingutil.ITab;
import org.relayirc.swingutil.IconManager;
import org.relayirc.util.ComparableString;
import org.relayirc.util.Debug;
import org.relayirc.util.QuickSort;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;

//////////////////////////////////////////////////////////////////////////////
/**
 * JPanel for specifying IRC server and editing list of servers.
 * GUI Generated by JBuilder Foundation 3.500.24.0.
 * @author David M. Johnson
 * @version $Revision: 1.1.2.1 $
 *
 * <p>The contents of this file are subject to the Mozilla Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL</p>
 * Original Code: Relay IRC Chat Engine<br>
 * Initial Developer: David M. Johnson <br>
 * Contributor(s): No contributors to this file <br>
 * Copyright (C) 1997-2000 by David M. Johnson <br>
 * All Rights Reserved.
 */
public class ServerPanel extends JPanel implements ITab {

   private ChatOptions _options = null;
   private ChatOptions.ServerList _servers = null;

   // Use _serverHolders to keep track of changes to server list.
   private Vector _serverHolders = new Vector();

   private String _prevNetwork = "";

   public BorderLayout borderLayout1 = new BorderLayout();
   public GridBagLayout gridBagLayout1 = new GridBagLayout();

   public JLabel    _networkLabel = new JLabel();
   public JComboBox _networkCombo = new JComboBox();

   public JLabel    _serverLabel = new JLabel();
   public JComboBox _serverCombo = new JComboBox();

   public JButton   _addButton = new JButton();
   public JButton   _editButton = new JButton();
   public JButton   _deleteButton = new JButton();
   public JButton   _connectButton = new JButton();

   public JPanel    _serverPanel = new JPanel();


   //-------------------------------------------------------------------------
   public ServerPanel() {
      try {
         jbInit();
         _options = ChatApp.getChatApp().getOptions();
         _servers = _options.getAllServers();
      }
      catch(Exception e) {
         e.printStackTrace();
      }
   }
   //-------------------------------------------------------------------------
   /** So callers can provide and action for the connect button. */
   public JButton getConnectButton() {
      return _connectButton;
   }
   //-------------------------------------------------------------------------
   /** Return's tab's name, part of ITab interface. */
   public String getName() {
      return "Server";
   }
   //-------------------------------------------------------------------------
   /** Loads values into this tab's GUI, part of ITab interface. */
   public void loadValues() {
      loadServerList(_servers,_options);
   }
   //-------------------------------------------------------------------------
   /** Saves tab's values from, part of ITab interface. */
   public void saveValues() {

      ServerHolder holder = (ServerHolder)_serverCombo.getSelectedItem();
      _options.setCurrentServer(holder.getServer());

      for (int i=0; i<_serverHolders.size(); i++) {
         holder = (ServerHolder)_serverHolders.elementAt(i);
         switch (holder.getState()) {
            case ADDED:
               holder.saveValues();
               _servers.addServer(holder.getServer());
               break;
            case DELETED:
               _servers.removeServer(holder.getServer());
               break;
            case EDITED:
               holder.saveValues();
               break;
            default:
               break;
         }
      }
   }
   //-------------------------------------------------------------------------
   /** Check validity of tab's values, part of ITab interface. */
   public boolean checkValues() {
       return _serverCombo.getSelectedItem() != null;
   }
   //-------------------------------------------------------------------------
   /** Enable or disable Add and Delete buttons, depending on combo state. */
   private void updateGUI() {
      ServerHolder holder = (ServerHolder)_serverCombo.getSelectedItem();
      if (holder != null) {
         _editButton.setEnabled(true);
         _deleteButton.setEnabled(true);
      }
      else {
         _editButton.setEnabled(false);
         _deleteButton.setEnabled(false);
      }
   }
   //-------------------------------------------------------------------------
   /** Load the panel with values to be edited. */
   private void loadServerList(
      ChatOptions.ServerList servers, ChatOptions options) {

      _servers = servers;
      _options = options;

      // Build collection of server holders
      _serverHolders = new Vector();
      for (int i=0; i<servers.getServerCount(); i++) {
         _serverHolders.addElement(new ServerHolder(servers.getServer(i)));
      }

      // Load network combo and select network of current server as
      // specified by the chat options object (_options).
      loadNetworkCombo();
      Server selServer = _options.getCurrentServer();
      if (selServer != null && selServer.getNetwork()!=null) {
         _networkCombo.setSelectedItem(selServer.getNetwork().trim());
      }

      // Load server combo and select network of current server as
      // specified by the chat options object (_options).
      loadServerCombo();

      startHandlingEvents();
   }
   //-------------------------------------------------------------------------
   /** Clear and reload the network combo. */
   private void loadNetworkCombo() {

      int index= _networkCombo.getSelectedIndex();

      // Clear network combo
      if (_networkCombo.getItemCount() > 0) {
         _networkCombo.removeAllItems();
      }
      // Use hashtable to create list of unique network names
      Hashtable networkHash = new Hashtable();
      for (int i=0; i<_serverHolders.size(); i++) {
         ServerHolder holder = (ServerHolder)_serverHolders.elementAt(i);
         networkHash.put(holder.getNetwork(),"dummy");
      }
      // Create vector of unique network names
      Vector networks = new Vector();
      for (Enumeration e=networkHash.keys(); e.hasMoreElements();) {
         networks.addElement(new ComparableString((String)e.nextElement()));
      }
      // Populate _networkCombo with sorted list of unique network names
      QuickSort.quicksort(networks,true);
      for (Enumeration e = networks.elements() ; e.hasMoreElements() ;) {
         String nname = ((ComparableString)e.nextElement()).getString();
         _networkCombo.addItem(nname);
      }

      if (index!=-1) _networkCombo.setSelectedIndex(index);
   }
   //-----------------------------------------------------------------
   /** Clear and reload the server combo. */
   private void loadServerCombo() {

      int index = _serverCombo.getSelectedIndex();

      // Clear the server combo, so it maybe reloaded
      if (_serverCombo.getItemCount() > 0) {
         _serverCombo.removeAllItems();
      }
      if (_networkCombo.getSelectedItem() != null) {

         // Load the server combo with server objects from server holder
         // collection. Leave out the ones that are marked as DELETED.
         if (_networkCombo.getSelectedItem() instanceof String net) {

             for (int i=0; i<_serverHolders.size(); i++) {

               ServerHolder holder = (ServerHolder)_serverHolders.elementAt(i);
               int state = holder.getState();
               if (state!=DELETED && holder.getNetwork().equals(net)) {
                  _serverCombo.addItem(holder);
               }
            }
         }
      }
      // Network has not changed, so keep previous selection
      String curNet = (String)_networkCombo.getSelectedItem();
      if (index!=-1 && _prevNetwork.equals(curNet)) {
         _serverCombo.setSelectedIndex(index);
      }
      // Select first server in the list
      if (_serverCombo.getItemCount() > 0) {
         _serverCombo.setSelectedIndex(0);
      }
      _prevNetwork = (String)_networkCombo.getSelectedItem();

      updateGUI();
   }
   //-------------------------------------------------------------------------
   /**
    * Respond to change in NETWORK combo.
    */
   private void onNetworkComboChanged(ItemEvent e) {
      if (e.getStateChange() == ItemEvent.SELECTED) {
         loadServerCombo();
         updateGUI();
      }
   }
   //-------------------------------------------------------------------------
   /** Respond to change in SERVER combo.  */
   private void onServerComboChanged(ItemEvent e) {
      updateGUI();
   }
   //-------------------------------------------------------------------------
   /** Respond to ADD button click. */
   private void onAddButtonPressed(ActionEvent e) {

      // Create new server and new server holder
      Server newServer = new Server(
         "host-name",6667,"network-name","New Server");
      ServerHolder newHolder = new ServerHolder(newServer);
      newHolder.setState(ADDED);

      // Show dialog so user may edit the new server object
      ServerAddDlg dlg =
         new ServerAddDlg("New Server",newHolder,_serverHolders);
      dlg.setVisible(true);

      // If user hit OK, add the new server to the server holders collection
      if (dlg.isOk()) {

         _serverHolders.addElement(newHolder);

         // Reload combos and make sure our new server remains selected
         loadNetworkCombo();
         _networkCombo.setSelectedItem(newHolder.getNetwork());

         loadServerCombo();
         _serverCombo.setSelectedItem(newHolder);
      }
   }

   //-------------------------------------------------------------------------
   /** Respond to EDIT button click. */
   private void onEditButtonPressed(ActionEvent e) {

      ServerHolder editHolder = (ServerHolder)_serverCombo.getSelectedItem();

      // Show dialog so user may edit the new server object
      ServerAddDlg dlg =
         new ServerAddDlg("Edit Server",editHolder,_serverHolders);
      dlg.setVisible(true);

      // If user hit OK, mark the server holder as EDITED
      if (dlg.isOk()) {

         editHolder.setState(EDITED);

         // Reload combos and make sure our server remains selected
         loadNetworkCombo();
         _networkCombo.setSelectedItem(editHolder.getNetwork());

         loadServerCombo();
         _serverCombo.setSelectedItem(editHolder);
      }
   }
   //-------------------------------------------------------------------------
   /** Respond to DELETE button click. */
   private void onDeleteButtonPressed(ActionEvent e) {
      ServerHolder editHolder = (ServerHolder)_serverCombo.getSelectedItem();
      editHolder.setState(DELETED);
      loadNetworkCombo();
      loadServerCombo();
   }
   //-------------------------------------------------------------------------
   /** Initialize GUI, written and maintained by JBuilder. */
   public void jbInit() throws Exception {
      _serverPanel.setLayout(gridBagLayout1);

      _connectButton.setToolTipText("Connect to currently selected server");
      _connectButton.setText("Connect to server!");
      _connectButton.setIcon(IconManager.getIcon("Plug"));

      _deleteButton.setToolTipText("Delete currently selected server");
      _deleteButton.setHorizontalAlignment(SwingConstants.LEFT);
      _deleteButton.setText("Delete...");
      _deleteButton.setIcon(IconManager.getIcon("Delete"));
      _networkLabel.setText("Choose an IRC network");
      _networkLabel.setToolTipText("");

      _addButton.setToolTipText("Add new server to list of available servers");
      _addButton.setHorizontalAlignment(SwingConstants.LEFT);
      _addButton.setHorizontalTextPosition(SwingConstants.RIGHT);
      _addButton.setIcon(IconManager.getIcon("Plus"));
      _addButton.setText("Add...");

      _editButton.setToolTipText("Edit currently selected server");
      _editButton.setHorizontalAlignment(SwingConstants.LEFT);
      _editButton.setIcon( IconManager.getIcon("DocumentDraw"));
      _editButton.setText("Edit...");

      _serverLabel.setText("Choose an IRC server");
      _networkCombo.setToolTipText("");
      _serverCombo.setToolTipText("");

      _serverPanel.add(_addButton,
         new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,
            GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 1, 0));

      _serverPanel.add(_editButton,
         new GridBagConstraints(2, 1, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,
            GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 1, 0));

      _serverPanel.add(_deleteButton,
         new GridBagConstraints(2, 2, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,
            GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0));

      _serverPanel.add(_networkCombo,
         new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0, GridBagConstraints.WEST,
            GridBagConstraints.HORIZONTAL, new Insets(3, 3, 3, 3), 0, 0));

      _serverPanel.add(_serverCombo,
         new GridBagConstraints(1, 1, 1, 1, 1.0, 0.0, GridBagConstraints.WEST,
            GridBagConstraints.HORIZONTAL, new Insets(3, 3, 3, 3), 0, 0));

      _serverPanel.add(_networkLabel,
         new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,
            GridBagConstraints.NONE, new Insets(3, 3, 3, 3), 0, 0));

      _serverPanel.add(_serverLabel,
         new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,
            GridBagConstraints.NONE, new Insets(3, 3, 3, 3), 0, 0));

      //_serverPanel.add(_connectButton,
         //new GridBagConstraints(0, 2, 2, 1,0.0, 0.0, GridBagConstraints.CENTER,
            //GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));

      this.setLayout(borderLayout1);
      this.setEnabled(true);
      this.add(_serverPanel, BorderLayout.CENTER);

   }
   //-------------------------------------------------------------------------
   //Starts event handlding by adding to components of interest.
   private void startHandlingEvents() {

      _networkCombo.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(ItemEvent e) {
            onNetworkComboChanged(e);
         }
      });
      _serverCombo.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(ItemEvent e) {
            onServerComboChanged(e);
         }
      });
      _editButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(ActionEvent e) {
            onEditButtonPressed(e);
         }
      });
      _addButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(ActionEvent e) {
            onAddButtonPressed(e);
         }
      });
      _deleteButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(ActionEvent e) {
            onDeleteButtonPressed(e);
         }
      });
   }
   ///////////////////////////////////////////////////////////////////////////

   // States of a server holder
   public static final int UNTOUCHED = 0;
   public static final int ADDED = 1;
   public static final int EDITED = 2;
   public static final int DELETED = 3;

   /** Holds server objects during editing, so changes can be cancelled. */
   public static class ServerHolder {
      private int    _state = UNTOUCHED;
      private String _name = null;
      private String _title = null;
      private String _network = null;
      private int[] _ports = null;
      private Server _server = null;
      private boolean _isFavorite = false;

      public ServerHolder(Server server) {
         _server = server;
         _name = _server.getName();
         _title = _server.getTitle();
         _network = _server.getNetwork();
         _ports = new int[server.getPorts().length];
         _isFavorite = server.isFavorite();
         System.arraycopy(server.getPorts(),0,_ports,0,_ports.length);
      }
      public void saveValues() {
         _server.setName(_name);
         _server.setTitle(_title);
         _server.setPorts(_ports);
         _server.setNetwork(_network);
         _server.setFavorite(_isFavorite);
      }

      public String toString() {return _title;}

      public Server getServer() {return _server;}

      public boolean isFavorite() {return _isFavorite;}
      public void setFavorite(boolean fave) {_isFavorite=fave;}

      public int getState() {return _state;}
      public void setState(int state) {_state=state;}

      public String getName() {return _name;}
      public void setName(String name) {_name=name;}

      public String getNetwork() {return _network;}
      public void setNetwork(String network) {_network=network;}

      public String getTitle() {return _title;}
      public void setTitle(String title) {_title=title;}

      public int[] getPorts() {return _ports;}
      public void setPorts(int[] ports) {_ports=ports;}
   }
   ///////////////////////////////////////////////////////////////////////////
   /** For testing only. */
   public static void main(String[] args) {

      try {
         Debug.setDebug(true);

         /*final ChatOptions options = new ChatOptions();
         ChatOptions.ServerList list = new ChatOptions.ServerList();
         list.importMircFile(new File("servers.ini"));
         final ServerPanel panel = new ServerPanel();

         panel.getConnectButton().addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               if (panel.checkValues()) {
                  panel.saveValues();
                  Debug.println("Server = "+options.getCurrentServer());
               }
               else {
                  Debug.println("Values don't check out");
               }
            }
         });

         JFrame frame = new JFrame();
         frame.getContentPane().setLayout(new BorderLayout());
         frame.getContentPane().add(panel,BorderLayout.CENTER);

         JButton btn = new JButton("OK");
         btn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
               //Server svr = panel.getServerObject();
               try {
                  //System.out.println("Server: "+panel.getServerObject());
               }
               catch (NullPointerException ex) {
                  //System.out.println("Server: null");
               }
               finally {
                  System.exit(0);
               }
            }
         });
         frame.getContentPane().add(btn,BorderLayout.SOUTH);

         frame.pack();
         StandardDlg.centerOnScreen(frame);
         frame.setVisible(true);
         */
      }
      catch (Exception e) {
         e.printStackTrace();
      }
   }
}

